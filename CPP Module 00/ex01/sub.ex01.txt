Программа принимает на вход несколько команд: EXIT ADD SEARCH, все остальные игнорируются

Если контактов в книге более 8, удалается самое старое и записывается новое

Команды:
1. EXIT - программа завершается и все контакты удаляются

2. ADD:
* Программа предложит пользователю ввести информацию о новом контакте,
по одному полю за раз, пока все поля не будут учтены. 
* Контакты определяются в определенные поля: Имя, Фамилия, ник,
телефонный номер, самый темный секрет.
* Телефонная книга должна быть представлена как экземпляр класса в вашем коде,
она должна содержать массив контактов.
*  Контанкт должен быть представлен как экземпляр класса в вашем коде. Вы можете
создать класс по своему усмотрению, но коллегиальная оценка проверит согласованность
вашего выбора. Снова посмотрите сегодняшнее видео, если вы не понимаете, что я имею
в виду(и я не имею в виду "использовать все", прежде чем вы спросите)

3. SEARCH:
* Программа должна отображать список не пустых контактов в 4 коллоны:
1.индекс 2.имя. 3.фамилия. 4.ник.
* Каждый столбец должен состоять из 10 символов, выровнен по левому краю и разделен
символом "|". Любой вывод, длина которого превышает ширину столбца i, усекается,
а последний отображаемый символ заменяется точкой.
* Затем программа снова запросит индекс нужной записи и отоброзит информацию о контакте,
по одному полю в строке. Если ввод не имеет смысла, определите соответствующее поведение.

В противном случае ввод отбрасывается.

Когда команда была выполнена правильно, программа ожидает другой команды ADD или SEARCH,
пока не появится команда EXIT.




class DateClass
{
public:
	int m_day;
	int m_month;
	int m_year;

	void print()
	{
		std::cout << m_day << "/" << m_month << "/" << m_year;
	}
};

int main()
{
	DateClass today { 12, 11, 2018 };
	
	today.m_day = 18;
	today.print();

	return 0;
}

Методы класса - все вызовы методов должны быть связаны с объектом класса. Когда мы вызываем today.print(), то мы сообщаем
компилятору вызвать метод print() объекта today. Связанный объект неявно передается методу. По этой причине его часто называют
НЕЯВНЫМ ОБЪЕКТОМ. Для работы с функциями, не являющимися членами класса, нам нужно передавать данные явно. Для работы с методами
всегда есть неявный объект класса. 


